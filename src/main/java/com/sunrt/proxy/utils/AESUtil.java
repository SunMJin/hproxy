package com.sunrt.proxy.utils;

import com.sunrt.proxy.protocol.MessageProtocol;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.util.ReferenceCountUtil;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;

public class AESUtil {

    private static final byte[] raw = "BywOYACPCxiYAMQJ".getBytes();
    private static final SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");

    public static byte[] encrypt(byte[] sSrc) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//"算法/模式/补码方式"
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        return cipher.doFinal(sSrc);
    }

    public static byte[] decrypt(byte[] sSrc) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        return cipher.doFinal(sSrc);
    }

    public static MessageProtocol encrypt(ByteBuf byteBuf) throws Exception {
        byte buf[]=getBytesByByteBuf(byteBuf);
        byte data[]=AESUtil.encrypt(buf);
        MessageProtocol messageProtocol=new MessageProtocol(data.length,data);
        return messageProtocol;
    }

    public static MessageProtocol decrypt(ByteBuf byteBuf) throws Exception {
        byte buf[]=getBytesByByteBuf(byteBuf);
        byte data[]=AESUtil.decrypt(buf);
        MessageProtocol messageProtocol=new MessageProtocol(data.length,data);
        return messageProtocol;
    }

    public static ByteBuf decrypt_mp(MessageProtocol messageProtocol) throws Exception {
        byte buf[]=messageProtocol.getContent();
        ByteBuf newBuf=Unpooled.buffer(buf.length);
        newBuf.writeBytes(decrypt(buf));
        return newBuf;
    }

    public static byte[] getBytesByByteBuf(ByteBuf byteBuf){
        byte buf[]=new byte[byteBuf.readableBytes()];
        byteBuf.getBytes(0,buf);
        ReferenceCountUtil.release(byteBuf);
        return buf;
    }

    public static void main(String[] args) throws Exception {
        byte x[]=new byte[]{-38, -81, 101, 97, -78, -37, -79, -112, -43, 56, -121, 62, 67, -56, 34, 114, 11, -35, -13, -74, -38, -66, 79, 33, -13, -12, -107, 26, 9, -16, 121, -56, 34, -72, 93, 47, 63, -83, -116, -35, 103, 49, 84, 34, -5, -119, -72, -38, -44, -116, -100, -17, 27, -9, 125, -90, -45, -70, -71, -104, -76, -88, 69, 61, 57, 64, -82, 108, 35, 54, 119, 47, -116, -51, -43, 5, 82, -90, 126, 55, 48, 24, -91, 48, 88, 4, 11, -95, 10, 41, 37, -97, -95, -55, -123, 33, 2, 56, 13, 56, -109, 1, 106, -32, -41, -61, -18, 85, -15, 61, -60, 121, -51, -12, 19, -127, 14, 112, -80, 69, -118, 92, 38, -75, -13, -110, 31, -128, -18, 35, 10, -84, -19, 54, -114, 115, -43, -25, 82, 7, 93, 104, 108, -68, -126, 83, -18, 68, -44, 6, -118, 56, 59, -57, -110, -4, 75, 1, 88, 57, 64, -36, 73, 6, -51, -27, -41, 72, -102, 111, -46, 12, 64, 0, 81, 57, 89, -117, 27, -46, -63, 0, -54, 88, 118, 11, -14, -86, -75, -103, -109, 48, -126, -85, 102, -107, 11, -58, -128, -50, -39, 126, -19, -10, 14, 110, -15, 108, 93, -106, 56, -46, -83, -115, 34, -3, 45, -120, -68, 127, 41, -60, -56, -30, 9, -42, -35, 28, -122, -111, -45, -70, -128, 76, 37, 82, 109, 59, -95, 75, 83, -22, -42, 84, 42, 31, -100, -75, 109, 101, -45, 67, 122, -114, 20, 17, 46, -28, -7, 3, 74, 90, -32, -15, -84, 70, 122, -35, 6, -61, -93, 51, 29, 91, 79, -79, 121, -62, 56, -105, 64, -88, 101, -80, 26, 93, -17, -54, -101, -83, -106, -51, 48, -20, 54, -19, 27, -96, -69, 114, -57, -22, -103, 58, -13, -127, 7, 114, -70, 13, -34, 34, -27, 1, -32, -80, -95, -31, 127, 41, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, -97, -78, -2, -96, -25, -58, 85, 40, 124, -75, -73, -39, -120, 95, 120, -94};
        //byte x[]=new byte[]{-38, -81, 101, 97, -78, -37, -79, -112, -43, 56, -121, 62, 67, -56, 34, 114, 11, -35, -13, -74, -38, -66, 79, 33, -13, -12, -107, 26, 9, -16, 121, -56, 34, -72, 93, 47, 63, -83, -116, -35, 103, 49, 84, 34, -5, -119, -72, -38, -44, -116, -100, -17, 27, -9, 125, -90, -45, -70, -71, -104, -76, -88, 69, 61, 57, 64, -82, 108, 35, 54, 119, 47, -116, -51, -43, 5, 82, -90, 126, 55, 48, 24, -91, 48, 88, 4, 11, -95, 10, 41, 37, -97, -95, -55, -123, 33, 2, 56, 13, 56, -109, 1, 106, -32, -41, -61, -18, 85, -15, 61, -60, 121, -51, -12, 19, -127, 14, 112, -80, 69, -118, 92, 38, -75, -13, -110, 31, -128, -18, 35, 10, -84, -19, 54, -114, 115, -43, -25, 82, 7, 93, 104, 108, -68, -126, 83, -18, 68, -44, 6, -118, 56, 59, -57, -110, -4, 75, 1, 88, 57, 64, -36, 73, 6, -51, -27, -41, 72, -102, 111, -46, 12, 64, 0, 81, 57, 89, -117, 27, -46, -63, 0, -54, 88, 118, 11, -14, -86, -75, -103, -109, 48, -126, -85, 102, -107, 11, -58, -128, -50, -39, 126, -19, -10, 14, 110, -15, 108, 93, -106, 56, -46, -83, -115, 34, -3, 45, -120, -68, 127, 41, -60, -56, -30, 9, -42, -35, 28, -122, -111, -45, -70, -128, 76, 37, 82, 109, 59, -95, 75, 83, -22, -42, 84, 42, 31, -100, -75, 109, 101, -45, 67, 122, -114, 20, 17, 46, -28, -7, 3, 74, 90, -32, -15, -84, 70, 122, -35, 6, -61, -93, 51, 29, 91, 79, -79, 121, -62, 56, -105, 64, -88, 101, -80, 26, 93, -17, -54, -101, -83, -106, -51, 48, -20, 54, -19, 27, -96, -69, 114, -57, -22, -103, 58, -13, -127, 7, 114, -70, 13, -34, 34, -27, 1, -32, -80, -95, -31, 127, 41, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16, 1, -57, -89, -31, -28, 34, 55, -96, 39, -4, -45, -112, 31, -60, -113, 16};
        //System.out.println(Arrays.toString(x.getBytes()));
        //byte x1[]=encrypt(x.getBytes());
        //System.out.println(Arrays.toString(x1));
        byte x2[]= decrypt(x);
        System.out.println(Arrays.toString(x2));

    }
}